Q1)
Which is the output (choose one)
A) P1Y14M465D
B) P3Y7M10D
C) P2Y2M465D
D) RuntimeException

Q2)
Given:
  class X {
    static int MAX_VAL = 100;
    int value = 99;
    public void setVal(int x) {
      if (x <= MAX_VAL) value = x; // implicitly this.value , X.MAX_VAL
    }
  }
and:
    X a = new X();
    X b = new X();
    a.setVal(120);
    System.out.print(a.value + ", ");
    b.MAX_VAL = 150;
    a.setVal(140);
    System.out.println(a.value);

    What is the result?
    A) 99, 99
    B) 120, 140
    C) 99, 140
    D) Compilation failure
    E) Exception at runtime

Q3)
  class Y {
    static String sayHi() { return "Y-Hello"; }
    String sayHi2() { return "Y-Hello2"; }
  }
  class Z extends Y {
    static String sayHi() {  return "Z-Hello"; }
    String sayHi2() { return "Z-Hello2"; }
  }

    Y y = new Z();
    System.out.println(y.sayHi() + ", " + y.sayHi2());

    What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails
Q4)
Given:
class X {
  int a = 99;
  static void show() { // static methods DO NOT HAVE "this"
    System.out.println("value of a is " + a);
  }
}
and:
X x = new X();
x.show();

What is the result?
A) Runtime Exception
B) Compilation fails
C) value of a is 99
D) value of a is null
E) value of a is 0

Q5)
Given:
class X {
  public int doStuff(int x) {return 0;}
  // line n1
}

Which, individually, would be valid at line n1
A) int doStuff(int x) {return 0;} // NO accessibility is not part of identity
B) public void doStuff(int x) {} // NO return type is not part of identity
C) public int doStuff(int x, String s) {return 0;} // YES different method...
D) public int doStuff(int other) {return 0;} // NO arg names are not part of identity

Q6)
given:
class X {
  void doStuff(int x, int y) {}
  void doStuff(double x, double y) {} // line n1
}
and:
X x = new x();
x.doStuff(3, 4); // line n2
x.doStuff(2, 3.14); // line n3

which are true (select all...):
A) Success..
B) Runtime Failure
C) Compile fails at line n1
D) Compile fails at line n2
E) Compile fails at line n3

Q7)
class Q22 {
    public int getValue() {return 1;}
}

which of these methods may individually be added
to a subclass of this class?
    A) public int getValue(int x) {return 1;} // yes, not an override
    B) public String getValue() {return "Hello";} // no, incompatible return type!
    C) public String getValue(int x) {return "Hello";} // yes, not an override

Q8)
class Base {
    void doBaseStuff() {
      System.out.println("doBaseStuff");
    }
  }
  class Sub extends Base {
//    @Override NOTE this was NOT part of the question (and it matters!)
    void doBaseStuff() {
      System.out.println("doSubStuff");
    }
    void doOtherStuff() {
      System.out.println("doOtherStuff");
    }
  }
Which are true:
In the Base and Sub classes, which are true in isolation?
    A) doBaseStuff in Base can be marked public without causing errors // NO
    B) doBaseStuff in Base can be marked private without causing errors // YES
    C) doBaseStuff in Sub can be marked public without causing errors // YES
    D) doBaseStuff in Sub can be marked protected without causing errors // YES
    E) doBaseStuff in Sub can be marked private without causing errors // NO

Q9)
class Base {
    void doBaseStuff() {
      System.out.println("doBaseStuff");
    }
  }
  class Sub extends Base {
    void doBaseStuff() {
      System.out.println("doSubStuff");
    }
    void doOtherStuff() {
      System.out.println("doOtherStuff");
    }
  }

Which are true:
In the Base and Sub classes, which are true in individually
    A) doBaseStuff in Base can be marked throws Exception without causing errors // YES
    B) doBaseStuff in Base can be marked throws RuntimeException without causing errors // YES
    C) doBaseStuff in Sub can be marked throws Exception without causing errors // NO
    D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
    E) if doBaseStuff in Base were marked throws Exception, 
       then doBaseStuff in Sub can be marked throws IOException without causing errors // YES
Q10)
Given:
try {
  if (Math.random() > -1) throw new IOException();
  if (Math.random() > 0.5) throw new Exception();
} catch (Exception e) {
  sop("Got exception");
} catch (IOException ioe) {
  sop("Got IOE");
}
What is the result?
A) Got exception
B) Got IOE
C) Got exception
   Got IOE
D) Runtime Exception
E) Compilation fails

Q11)
Given:
try {
  if (Math.random() > 0.5) throw new IOException();
}
What is the result?
A) Compilation fails
B) Exception at runtime
C) Method returns to caller cleanly

Q12)
Given:
try {
  sop("Before");
  if (Math.random() > 0.5) throw new IOException();
  sop("Success");
} finally {
  sop("finally");
}
sop("after");

What is the result?
A) Compilation fails
B) Before
C) Success
D) finally
E) after

Q13)
Given:
public void doStuff() { // line n1
       // resource(s) must be implementations of AutoCloseable
       // must be newly declared variable and must be initialized, right here!
  try (FileInputStream fis = new FileInputStream("data.dat")) { // line n2
    if (Math.random() > 0.5) throw new IOException();
  } // line n3
// auto-generates finally block which closes those resouces
}
What is the result?
A) Compilation fails at line n1
B) Compilation fails at line n2
C) Compilation fails at line n3
D) Exception from method at runtime if data.dat doesn't exist
E) Completes normally if data.dat does exist
